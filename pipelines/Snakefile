shell.prefix("source config.sh; set -eo pipefail ; ")

configfile: "config.json"

import os
import glob
import csv

TMP = config["local_path"]
REF = config["reference"]
REFI = config["reference"] + ".sa"

BWA_COMMAND = config["bwa_prefix"] + config["bwa_special"]

SAMPLES=config["samples"].keys()

def _get_r1_by_sample(wildcards):
    return config["samples"][wildcards.samples]["reads"]["R1"]

def _get_r2_by_sample(wildcards):
    return config["samples"][wildcards.samples]["reads"]["R2"]

def _get_read_group_by_sample(wildcards):
    return config["samples"][wildcards.samples]["read_group"]

rule beer    :
     input   : expand("sorted_bam/{samples}.bwa_aln.sort.bam.bai", samples=SAMPLES)

rule burrito :
     input   : "sorted_bam/{samples}.bwa_aln.sort.bam"
     output  : "sorted_bam/{samples}.bwa_aln.sort.bam.bai"
     params  : sge_opts=config["cluster_settings"]["lite"]
     shell   : "samtools index {input}"

rule salsa   :
     input   : "raw_bam/{samples}.bwa_aln.bam"
     output  : "sorted_bam/{samples}.bwa_aln.sort.bam"
     params  : sge_opts=config["cluster_settings"]["heavy"], THREADS=config["threads"]
     shell   : "samtools sort -@ {params.THREADS} -o {output} {input}"

rule chips   :
     input   : R={REF}, R1=_get_r1_by_sample, R2=_get_r2_by_sample,
     output  : "raw_bam/{samples}.bwa_aln.bam"
     params  : sge_opts=config["cluster_settings"]["heavy"], RG=_get_read_group_by_sample, THREADS=config["threads"]
     shell   : "{BWA_COMMAND} {params.RG} {input.R} {input.R1} {input.R2} | samtools view -F 2304 -@ {params.THREADS} -Sb > {TMP}/{wildcards.samples}.bam ; rsync  --ignore-existing --bwlimit=50000  {TMP}/{wildcards.samples}.bam {output}"

rule index   :
     input   : {REF}
     output  : {REFI}
     params  : sge_opts=config["cluster_settings"]["lite"]
     shell   : "bwa index {REF}"